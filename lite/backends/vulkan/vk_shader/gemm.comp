#version 450

layout(std430) buffer;
layout(std430) uniform;
layout(set=0, binding=0) uniform mediump sampler2D in_;
layout(set=0, binding=1) uniform mediump sampler2D w_;
layout(set=0, binding=2) uniform mediump sampler2D b_;
layout(set=0, binding=3, rgba16f) writeonly restrict mediump uniform image2D out_;


layout(set = 0, binding = 4) uniform bbBuffer{
    ivec3 dims;
    bvec2 trans;
    bvec2 rb;
}param;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

/*
void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID);
     vec4 o_d0 = vec4(0);
     vec4 o_d1 = vec4(0);
     vec4 o_d2 = vec4(0);
     vec4 o_d3 = vec4(0);
    //if( all(lessThan(pos.xy, param.dims.yx))) {
    //if( pos.x < 1 && pos.y < param.dims.x) {
    //if(pos.x < param.dims.y && pos.y < 1) {
    if(pos.x < param.dims.y && pos.y < param.dims.x) {
            o_d0 = vec4(0);
            o_d1 = vec4(0);
            o_d2 = vec4(0);
            o_d3 = vec4(0);
            vec4 in_d;
            vec4 w_d;
            for(int i = 0; i < param.dims.z; i++){
                 in_d = texelFetch(in_, ivec2(i, pos.y*4),0);
                 w_d = texelFetch(w_, ivec2(pos.x,i),0);
                o_d0 += in_d * w_d;
            }
            float o0 = o_d0.r+o_d0.g+o_d0.b+o_d0.a;
            //float o0 = pos.x;
            
            for(int i = 0; i < param.dims.z; i++){
                 in_d = texelFetch(in_, ivec2(i,pos.y*4+1),0);
                 w_d = texelFetch(w_, ivec2(pos.x,i),0);
                o_d1 += in_d * w_d;
            }
            float o1 = o_d1.r+o_d1.g+o_d1.b+o_d1.a;
            //float o1 = pos.x;
            for(int i = 0; i < param.dims.z; i++){
                 in_d = texelFetch(in_, ivec2(i, pos.y*4+2),0);
                 w_d = texelFetch(w_, ivec2(pos.x,i),0);
                o_d2 += in_d * w_d;
            }
            float o2 = o_d2.r+o_d2.g+o_d2.b+o_d2.a;
            //float o2 = pos.x;
            for(int i = 0; i < param.dims.z; i++){
                 in_d = texelFetch(in_, ivec2(i,pos.y*4+3),0);
                 w_d = texelFetch(w_, ivec2(pos.x,i),0);
                o_d3 += in_d * w_d;
            }
            float o3 = o_d3.r+o_d3.g+o_d3.b+o_d3.a;
            //float o3 = pos.x;
        
        //imageStore(out_, pos, vec4(pos.y));
        imageStore(out_, pos, vec4(o0,o1,o2,o3));
        //imageStore(out_, pos, vec4(220));

    }
        
        //imageStore(out_, ivec2(0,0), vec4(0.1,0.2,0.3,0.4));
        //imageStore(out_, ivec2(1,0), vec4(1.1,1.2,1.3,1.4));
        //imageStore(out_, ivec2(2,0), vec4(2.1,2.2,2.3,2.4));
        //imageStore(out_, ivec2(3,0), vec4(3.1,3.2,3.3,3.4));
        
        //imageStore(out_, pos, vec4(22));
}
*/

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID);
     vec4 o_d0 = vec4(0);
     vec4 o_d1 = vec4(0);
     vec4 o_d2 = vec4(0);
     vec4 o_d3 = vec4(0);
    if(pos.x < param.dims.y && pos.y < param.dims.x) {
            o_d0 = vec4(0);
            o_d1 = vec4(0);
            o_d2 = vec4(0);
            o_d3 = vec4(0);
            vec4 in_d;
            vec4 w_d;
            for(int i = 0; i < param.dims.z; i++)
            {
                    w_d = texelFetch(w_, ivec2(pos.x,i),0);

                    in_d = texelFetch(in_, ivec2(i, pos.y),0);
                    
                    /*o_d0 += in_d * w_d.r;
                    o_d1 += in_d * w_d.g;
                    o_d2 += in_d * w_d.b;
                    o_d3 += in_d * w_d.a;*/
                    o_d0 += w_d * in_d.r;
                    o_d1 += w_d * in_d.g;
                    o_d2 += w_d * in_d.b;
                    o_d3 += w_d * in_d.a;
                    /*o_d0=in_d;
                    o_d1=in_d;
                    o_d2=in_d;
                    o_d3 =in_d;*/
            }


#ifdef _BIAS
        o_d0 += texelFetch(b_, ivec2(pos.x,pos.y*4), 0);
        o_d1 += texelFetch(b_, ivec2(pos.x,pos.y*4+1), 0);
        o_d2 += texelFetch(b_, ivec2(pos.x,pos.y*4+2), 0);
        o_d3 += texelFetch(b_, ivec2(pos.x,pos.y*4+3), 0);
#endif
        imageStore(out_, ivec2(pos.x,pos.y*4), o_d0);
        imageStore(out_, ivec2(pos.x,pos.y*4+1), o_d1);
        imageStore(out_, ivec2(pos.x,pos.y*4+2), o_d2);
        imageStore(out_, ivec2(pos.x,pos.y*4+3), o_d3);
        
        /*
        imageStore(out_, ivec2(pos.x,pos.y*4), vec4(1));
        imageStore(out_, ivec2(pos.x,pos.y*4+1), vec4(2));
        imageStore(out_, ivec2(pos.x,pos.y*4+2), vec4(3));
        imageStore(out_, ivec2(pos.x,pos.y*4+3), vec4(4));
        imageStore(out_, ivec2(pos.x,pos.y*4), vec4(0.1,0.2,0.3,0.4));
        imageStore(out_, ivec2(pos.x,pos.y*4+1), vec4(1.1,1.2,1.3,1.4));
        imageStore(out_, ivec2(pos.x,pos.y*4+2), vec4(2.1,2.2,2.3,2.4));
        imageStore(out_, ivec2(pos.x,pos.y*4+3), vec4(3.1,3.2,3.3,3.4));
        */
        
    }
        /*
        imageStore(out_, ivec2(0,0), vec4(0.1,0.2,0.3,0.4));
        imageStore(out_, ivec2(0,1), vec4(1.1,1.2,1.3,1.4));
        imageStore(out_, ivec2(0,2), vec4(2.1,2.2,2.3,2.4));
        imageStore(out_, ivec2(0,3), vec4(3.1,3.2,3.3,3.4));
        */
        
        //imageStore(out_, pos, vec4(22));

}
