#version 450
/*
layout (binding = 0) buffer bottom_top_blob { float bottom_top_blob_data[]; };
layout (binding = 1)  buffer dataout { float bottom_top_blob_dataout[]; };

layout(set=0, binding=2) uniform constBuffer{
    int n;
    int c;
    int h;
    int w;
} uConstant;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    const int gi =   gy * 16 + gx;

    float v = bottom_top_blob_data[gi];

    bottom_top_blob_data[gi] = (v);
    bottom_top_blob_dataout[gi] = (v)+uConstant.h*1;
}
*/

layout(std430) buffer;
layout(std430) uniform;
layout(set=0, binding=1, rgba16f) writeonly restrict mediump uniform image3D uOutput;

layout(set=0, binding=0) readonly buffer sourceBuffer{
    float data[];
} uInBuffer;


layout(set=0, binding=2) uniform constBuffer{
    int batch;
    int channel;
    int height;
    int width;
    int im_w;
    int im_h;
} uConstant;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    //int channelC4 = (uConstant.channel + 3) / 4;
    int c = uConstant.channel > 4 ? 4 : uConstant.channel; 
    int im = uConstant.height* uConstant.width;
    int imc = im * uConstant.channel;
    int cIndex = uConstant.channel % 4;
    int lastZ = uConstant.channel - cIndex;
    int zz = uConstant.channel / 4 * uConstant.width;

    if (pos.x < uConstant.im_w && pos.y < uConstant.im_h)
    {
        int im_n_cnt = pos.y / uConstant.height ;
        int im_w_cnt = pos.x / uConstant.width;
        int im_n_cnt_ = pos.y % uConstant.height;
        int im_w_cnt_ = pos.x % uConstant.width;

        int scale = im_n_cnt * imc;
        scale += im_w_cnt * im * c;
        scale += im_n_cnt_ * uConstant.width  + im_w_cnt_;
        
        vec4 color = vec4(0);
        
        //if(uConstant.channel < 4 ||pos.x >= zz)
        if(pos.x >= zz)
        {
            if(cIndex == 1)
            {
                color.r = uInBuffer.data[scale];
            }
            else if(cIndex == 2)
            {
                color.r = uInBuffer.data[scale];
                color.g = uInBuffer.data[scale+im];

            }
            else if(cIndex == 3)
            {
                color.r = uInBuffer.data[scale];
                color.g = uInBuffer.data[scale+im];
                color.b = uInBuffer.data[scale+2*im];
            }
        }
        else
        {
            color.r = uInBuffer.data[scale];
            color.g = uInBuffer.data[scale+im];
            color.b = uInBuffer.data[scale+2*im];
            color.a = uInBuffer.data[scale+3*im];
        }

        imageStore(uOutput, pos, color);
    }



}
